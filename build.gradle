plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'potatowoong'
version = ''

java {
    sourceCompatibility = '17'
}

configurations {
    configureEach {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // Spring Data JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // log4j2
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.5'

    // QueryDSL
    annotationProcessor 'com.querydsl:querydsl-apt:5.1.0:jakarta'
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'

    // P6Spy
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.1'

    // Apache Commons Lang
    implementation 'org.apache.commons:commons-lang3:3.14.0'

    // Apache Commons
    implementation 'commons-io:commons-io:2.16.1'

    // Jasypt
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'

    // AWS S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // MariaDB
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // spring-boot-devtools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // REST Docs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

jar {
    archiveBaseName.set('potato-mall')
    archiveVersion.set('')
    archiveClassifier.set('')
    enabled = false
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    useJUnitPlatform()
    systemProperty "jasypt.encryptor.password", System.getProperty("jasypt.encryptor.password")
    outputs.dir snippetsDir
}

asciidoctor {
    configurations 'asciidoctorExt'
    baseDirFollowsSourceFile()
    inputs.dir snippetsDir
    dependsOn test
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

tasks.register('copyDocument', Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")

    doLast {
        file("build/resources/main/static/docs").mkdir()
        copy {
            from file("src/main/resources/static/docs")
            into file("build/resources/main/static/docs")
        }
    }
}

build {
    dependsOn copyDocument
}

bootJar {
    dependsOn copyDocument
    from('build/resources/main/static/docs') {
        into 'static/docs'
    }
}

// active profile 설정
ext.profile = (!project.hasProperty('profile') || !profile) ? 'dev' : profile

// active profile 에 따른 리소스 폴더 지정
sourceSets {
    main {
        resources {
            srcDirs "src/main/resources", "src/main/resources-${profile}"
        }
    }
}

tasks {
    processResources {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}